# Expires map
map $sent_http_content_type $expires {
    default                    off;
    text/html                  epoch;
    text/css                   max;
    application/json           max;
    application/javascript     max;
    ~image/                    max;
}

server {
  listen 80;
  location / {      
      root /usr/share/nginx/html;
      index index.html index.htm;
      try_files $uri $uri/ /index.html =404;
    }

  # 如果不将静态文件分开配置，访问js只会得到index.html，因为try_files要求目录下
  # 有.js文件存在，因为js已经压缩成.js.gz，因此有错。
  # 参考：https://www.cnblogs.com/uimeigui/p/15657146.html
  #静态文件交给nginx处理
  location ~* \.(jpg|jpeg|png|gif|css|js|swf|mp3|avi|flv|xml|zip|rar)$ {
       root /usr/share/nginx/html;
       #  gzip_static on;
    }
  expires $expires;
  
  gzip on;
  # Nginx的动态压缩是对每个请求先压缩再输出，这样造成虚拟机浪费了很多cpu，解决这个问题可以利用nginx模块Gzip Precompression，这个模块的作用是对于需要压缩的文件，直接读取已经压缩好的文件(文件名为加.gz)，而不是动态压缩，对于不支持gzip的请求则读取原文件
  gzip_static on;
  gzip_comp_level 6;
  # gzip_buffers 16 8k  # gzip_buffers被设置为16 8k，表示分配16个8k大小的压缩缓冲区
  gzip_min_length 1k; # 配置项，表示进行gzip压缩的最小文件大小。只有当文件大小超过该值时，才会进行gzip压缩，如1k, 256

  gzip_types text/html text/plain application/javascript application/x-javascript text/css application/xml text/javascript; # application/x-httpd-php image/bmp application/x-bmp image/x-ms-bmp application/vnd.ms-fontobject font/ttf font/opentype font/x-woff;
}
